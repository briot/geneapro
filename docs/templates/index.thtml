<% block style %>
    .description { font-size: 1.2em; margin-bottom: 30px; margin-top: 30px; font-style: italic;}
		pre { background: #000; color: #fff; padding: 15px;}
<% endblock style %>

<% var section home %>

<% block container %>

<p>
<b>Geneapro</b> is a web-based genealogical software.
</p>

<p>
As opposed to most genealogical software out there, it is based on the
<a href="http://www.ngsgenealogy.org/cs/GenTech_Projects">GenTech</a>
data model, designed by a group of experts.
</p>

<p>
This model is based on the concept of <b>assertions</b> (positive or negative).
Every time you find a source of information, you extract and record
a number of facts from it (<i>"The person X was born on that date,
her mother was Y"</i>). You can
then match the persons mentioned in those documents with those already
in your database, making assertions (<i>"The person X must be the same as
P, already in my database, because of such and such reason"</i>).
As a result, you can record any number of information for each person in
your database (multiple birth dates, when there are ambiguities for instance).
</p>

<p>
The traditional behavior with other genealogical applications is to then
delete one of those birth dates if you find extra information that makes you
think it was wrong. But not with Geneapro. Instead, you would simply
transform that into a <b>negative assertion</b> (<i>"Person X cannot be born at
that date because..."</i>). Geneapro will no longer show you that date by
default, but the information is still there. That way, when you find
another reference to a person with the same name and that date, you know
that can't be the right date.
</p>

<p>
So far, the above scenario is partially supported in Geneapro: it supports
negative assertions, but will not currently let you edit the database (you
can only import existing information from some other software through a
<a href="gedcom.html">GEDCOM</a> file.
</p>

<p>
But this is coming soon!
</p>

<h2>Install</h2>
<p>To install:
 <ul>
  <li>Change settings.py if appropriate to reflect the database engine and name you wish to use</li>
  <li>run   <tt>make reset</tt><br>
     This creates the tables and imports initial data in it.</li>
  <li>run   <tt>./manage.py import file.ged</tt><br>
     to import the given gedcom file in the database</li>
 </ul>
</p>
<p>
You can then run the server as usual with django by running<br>
<tt>./manage.py  runserver</tt><br>
and connect to <tt>http:/127.0.0.1:8000/</tt>
</p>

<h2>License</h2>
<p>GPL</p>

<h2>Authors</h2>
<p>Emmanuel Briot (briot.emmanuel at gmail dot com)</p>

<% endblock container %>
