import * as Redux from 'redux';
import { REHYDRATE } from 'redux-persist/constants';
import { FanchartSettings } from '../Store/Fanchart';
import { PedigreeSettings } from '../Store/Pedigree';
import { RadialSettings } from '../Store/Radial';
import { QuiltsSettings } from '../Store/Quilts';
import { PersonSet } from '../Store/Person';
import { SourceSet } from '../Store/Source';
import { HistoryItem } from '../Store/History';
import { actionCreator } from '../Store/Actions';
import { GenealogyEventSet } from '../Store/Event';
import { PlaceSet } from '../Store/Place';
import { QuiltsResult } from '../Server/Quilts';
import { ResearcherSet } from '../Store/Researcher';
import { JSONCount } from '../Server/Stats';

export type DatabaseObjectsCount = JSONCount;

export interface AppState {
   pedigree: PedigreeSettings;
   fanchart: FanchartSettings;
   radial: RadialSettings;
   quilts: QuiltsSettings;
   quiltsLayout: {
      layout?: QuiltsResult,
   };
   count: DatabaseObjectsCount|undefined;
   persons: PersonSet;        // details for all persons
   places: PlaceSet;          // details for all places
   events: GenealogyEventSet; // all known events
   sources: SourceSet;
   history: HistoryItem[];    // id of persons recently visited
   csrf: string;              // CSRF token for Django
   researchers: ResearcherSet;
}

export type GPDispatch = Redux.Dispatch<AppState>;
export type GPStore = Redux.Store<AppState>;

/**
 * Rehydrate action generated by redux-persist
 */
export const rehydrate = actionCreator<AppState>(REHYDRATE);
rehydrate.type = REHYDRATE;   // no prefix
